#! config.yaml

#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")

#@ load("labels.lib.yaml", "labels")

#@ def image(name, version):
#@   return "vfarcic/{}:{}".format(name, version)
#@ end

apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name
  labels: #@ labels(data.values.name, data.values.version)
spec:
  selector:
    matchLabels:
      app: #@ data.values.name
  template:
    metadata:
      labels:
        app: #@ data.values.name
    spec:
      containers:
        - ports:
          - containerPort: #@ data.values.port
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 125m
              memory: 128Mi
          name: #@ data.values.name
          image: #@ image(data.values.name, data.values.version)
          livenessProbe:
            httpGet:
              path: /
              port: #@ data.values.port
          readinessProbe:
            httpGet:
              path: /
              port: #@ data.values.port

#@ if data.values.ingress:
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #@ data.values.name
  labels: #@ labels(data.values.name, data.values.version)
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: #@ data.values.name
            port:
              number: #@ data.values.port
    host: #@ data.values.ingress.host
#@ end
---

apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.name
  labels: #@ labels(data.values.name, data.values.version)
spec:
  type: ClusterIP
  ports:
  - port: #@ data.values.port
    targetPort: #@ data.values.port
    protocol: TCP
    name: http
  selector:
    app: #@ data.values.name
